colnames(my_data)<-cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
!(5==7)
FALSE&FALSE
TRUE&c(TRUE,FALSE,FALSE)
TRUE&&c(TRUE,FALSE,FALSE)
TRUE|c(TRUE,FALSE,FALSE)
TRUE||c(TRUE,FALSE,FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints<-sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
class(cls_list)
as.character(cls_list)
cls_list
play()
class(cls_list)
type nxt()
as.character(cls_list)
class(cls_list)
nxt()
class(cls_list)
class(cls_list)
as.character(cls_list)
sapply()
?sapply
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head()
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
$landmass
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flag$landmass, mean)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
sample(c(0, 1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0, 1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- sample(1, 100, replace = TRUE, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
rnorm()
?rnorm()
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
colMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
t1 <- Sys.time()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = "days")
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance", main = "My Plot")
plot(cars, main = "My Plot")
plot(cars, main = "My Plot", sub = "My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
data(mtcars)
boxplot()
play()
nxt()
boxplot()
dim(mtcars)
str(mtcars)
?boxplot
boxplot(mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
install.packages(dplyr)
R.version.string
library(swirl)
install_from_swirl("Getting and Cleaning Data")
install.packages("swirl")
install.packages("swirl")
library(swirl)
library(swirl)
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
"!is.na(c(3, 5, NA, 10))"
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
submit()
summarize(by_package, mean(size))
submit()
pack_sum <- summarize(by_package,
count = ,
unique = ,
countries = ,
avg_bytes = )
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
View(result3)
submit()
submit()
View(result3)
script_vals_identical()
script_vals_identical()
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
submit()
students3
submit()
?spread
submit()
extract_numeric("class5")
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
bind_rows(passed, failed)
sat
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
month(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
second(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
---
title: "Reproducible Research: Peer Assessment 1"
output:
html_document:
keep_md: true
---
## Loading and preprocessing the data
Load the data (i.e. read.csv())
```{r}
setwd("C:/Users/PHUNKMJ/Desktop/Coursera/Modules5/Peer Assignment 1")
library(plyr)
library(ggplot2)
activitydf <- read.csv("activity.csv") # read the datafile from csv
activitydf$date <- as.POSIXct(activitydf$date) # set the dates to POSIXct
```
## What is mean total number of steps taken per day?
*Make a histogram of the total number of steps taken each day
*Calculate and report the mean and median of the total number of steps taken per day
```{r}
#Calculate the total number of steps taken per day
dailysteps <- aggregate(activitydf$steps, by = list(activitydf$date), sum, na.rm=TRUE)
names(dailysteps) <- c("Date", "steps")
#Make a histogram of the total number of steps taken each day
qplot(steps, data = dailysteps, geom="histogram", xlab = "Daily Number of Steps", binwidth = 300)
#Calculate and report the mean and median of the total number of steps taken per day
mean.steps <- mean(dailysteps$steps)
median.steps <- median(dailysteps$steps)
```
The mean number of steps each day is `r mean.steps`.
The median number of steps each day is `r median.steps`.
## What is the average daily activity pattern?
Make a time series plot of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
```{r}
#df of the mean and median number of steps taken, averaged across all days (y-axis)
intsteps <- aggregate(activitydf$steps, by = list(activitydf$interval), mean, na.rm=TRUE)
intstepsmed <- aggregate(activitydf$steps, by = list(activitydf$interval), median, na.rm=TRUE)
intsteps <- cbind(intsteps[], intstepsmed$x)
#Tidy the df names and round the numbers
names(intsteps) = c("interval","mean.steps", "median.steps")
intsteps$mean.steps <- round(intsteps$mean.steps)
intsteps$median.steps <- round(intsteps$median.steps)
ggplot(intsteps, aes(x = interval, y = mean.steps)) + geom_line()
most.steps <- intsteps$interval[intsteps$mean.steps == max(intsteps$mean.steps)]
```
The interval with the most steps each day (on average is) : 'r most.steps'.
## Imputing missing values
Make a histogram of the total number of steps taken each day and Calculate and report the mean and median total number of steps taken per day.
```{r}
#find the NAs
na.steps <- subset(activitydf, is.na(steps))
num.NAs <-length(na.steps$steps)
#replace the NAs with the median number of steps for that period
nstps <- data.frame(date=activitydf$date[is.na(activitydf$steps)], interval = activitydf$interval[is.na(activitydf$steps)], steps=intsteps[match(intsteps$interval, activitydf$interval[is.na(activitydf$steps)]),3])
# remove the NA's from the period
activitydf <- subset(activitydf, !is.na(steps))
# Append the median steps to the Activity DF
activitydf <- rbind(activitydf, nstps)
#sum the number of steps each day into the dailysteps2 DF and get the mean and median
dailysteps2 <- aggregate(activitydf$steps, by = list(activitydf$date), sum, na.rm=TRUE)
names(dailysteps2) <- c("Date", "steps")
qplot(steps, data = dailysteps2, geom="histogram", xlab = "Daily Number of Steps", binwidth = 300)
mean.steps2 <- mean(dailysteps2$steps) #
median.steps2 <- median(dailysteps2$steps)
```
There are `r na.steps` intervals with NA
The new mean number of steps is `r mean.steps2` this is close to the mean from the data with NAs of `r mean.steps`.
THe new median number of steps is `r median.steps2` this is the same as the median from the data with NAs of `r median.steps2`. There is little impact to the estimated number of steps a day from using the median for the time interval to replace the missing data. I had previously used the mean but this introduced a sizeable difference.
## Are there differences in activity patterns between weekdays and weekends?
```{r}
# Add the Weekday/weekend identifier
activitydf$week <- ifelse(weekdays(activitydf$date) == "Saturday" | weekdays(activitydf$date) == "Sunday" ,"weekend","weekday")
#df of the mean and median number of steps taken, averaged across all days (y-axis)
intsteps2 <- aggregate(activitydf$steps, by = list(activitydf$week, activitydf$interval), mean, na.rm=TRUE)
intstepsmed2 <- aggregate(activitydf$steps, by = list(activitydf$week, activitydf$interval), median, na.rm=TRUE)
intsteps2 <- cbind(intsteps2[], intstepsmed2$x)
#Tidy the df names and round the numbers
names(intsteps2) = c("weekday", "interval","mean.steps", "median.steps")
intsteps2$mean.steps <- round(intsteps2$mean.steps)
intsteps2$median.steps <- round(intsteps2$median.steps)
ggplot(intsteps2, aes(x = interval, y = mean.steps)) + ylab("Number of Steps") + geom_line() + facet_grid(weekday~.)
```
As can be seen from the plots above the user appears to start walking around later at weekends (maybe they sleep later). Once they are awake they tend to take more steps and to be walking around (awake?) later in the day.
---
title: "Reproducible Research: Peer Assessment 1"
output:
html_document:
keep_md: true
---
## Loading and preprocessing the data
Load the data (i.e. read.csv())
```{r}
setwd("C:/Users/PHUNKMJ/Desktop/Coursera/Modules5/Peer Assignment 1")
library(plyr)
library(ggplot2)
activitydf <- read.csv("activity.csv") # read the datafile from csv
activitydf$date <- as.POSIXct(activitydf$date) # set the dates to POSIXct
```
## What is mean total number of steps taken per day?
*Make a histogram of the total number of steps taken each day
*Calculate and report the mean and median of the total number of steps taken per day
```{r}
#Calculate the total number of steps taken per day
dailysteps <- aggregate(activitydf$steps, by = list(activitydf$date), sum, na.rm=TRUE)
names(dailysteps) <- c("Date", "steps")
#Make a histogram of the total number of steps taken each day
qplot(steps, data = dailysteps, geom="histogram", xlab = "Daily Number of Steps", binwidth = 300)
#Calculate and report the mean and median of the total number of steps taken per day
mean.steps <- mean(dailysteps$steps)
median.steps <- median(dailysteps$steps)
```
The mean number of steps each day is `r mean.steps`.
The median number of steps each day is `r median.steps`.
## What is the average daily activity pattern?
Make a time series plot of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
```{r}
#df of the mean and median number of steps taken, averaged across all days (y-axis)
intsteps <- aggregate(activitydf$steps, by = list(activitydf$interval), mean, na.rm=TRUE)
intstepsmed <- aggregate(activitydf$steps, by = list(activitydf$interval), median, na.rm=TRUE)
intsteps <- cbind(intsteps[], intstepsmed$x)
#Tidy the df names and round the numbers
names(intsteps) = c("interval","mean.steps", "median.steps")
intsteps$mean.steps <- round(intsteps$mean.steps)
intsteps$median.steps <- round(intsteps$median.steps)
ggplot(intsteps, aes(x = interval, y = mean.steps)) + geom_line()
most.steps <- intsteps$interval[intsteps$mean.steps == max(intsteps$mean.steps)]
```
The interval with the most steps each day (on average is) : 'r most.steps'.
## Imputing missing values
Make a histogram of the total number of steps taken each day and Calculate and report the mean and median total number of steps taken per day.
```{r}
#find the NAs
na.steps <- subset(activitydf, is.na(steps))
num.NAs <-length(na.steps$steps)
#replace the NAs with the median number of steps for that period
nstps <- data.frame(date=activitydf$date[is.na(activitydf$steps)], interval = activitydf$interval[is.na(activitydf$steps)], steps=intsteps[match(intsteps$interval, activitydf$interval[is.na(activitydf$steps)]),3])
# remove the NA's from the period
activitydf <- subset(activitydf, !is.na(steps))
# Append the median steps to the Activity DF
activitydf <- rbind(activitydf, nstps)
#sum the number of steps each day into the dailysteps2 DF and get the mean and median
dailysteps2 <- aggregate(activitydf$steps, by = list(activitydf$date), sum, na.rm=TRUE)
names(dailysteps2) <- c("Date", "steps")
qplot(steps, data = dailysteps2, geom="histogram", xlab = "Daily Number of Steps", binwidth = 300)
mean.steps2 <- mean(dailysteps2$steps) #
median.steps2 <- median(dailysteps2$steps)
```
There are `r na.steps` intervals with NA
The new mean number of steps is `r mean.steps2` this is close to the mean from the data with NAs of `r mean.steps`.
THe new median number of steps is `r median.steps2` this is the same as the median from the data with NAs of `r median.steps2`. There is little impact to the estimated number of steps a day from using the median for the time interval to replace the missing data. I had previously used the mean but this introduced a sizeable difference.
## Are there differences in activity patterns between weekdays and weekends?
```{r}
# Add the Weekday/weekend identifier
activitydf$week <- ifelse(weekdays(activitydf$date) == "Saturday" | weekdays(activitydf$date) == "Sunday" ,"weekend","weekday")
#df of the mean and median number of steps taken, averaged across all days (y-axis)
intsteps2 <- aggregate(activitydf$steps, by = list(activitydf$week, activitydf$interval), mean, na.rm=TRUE)
intstepsmed2 <- aggregate(activitydf$steps, by = list(activitydf$week, activitydf$interval), median, na.rm=TRUE)
intsteps2 <- cbind(intsteps2[], intstepsmed2$x)
#Tidy the df names and round the numbers
names(intsteps2) = c("weekday", "interval","mean.steps", "median.steps")
intsteps2$mean.steps <- round(intsteps2$mean.steps)
intsteps2$median.steps <- round(intsteps2$median.steps)
ggplot(intsteps2, aes(x = interval, y = mean.steps)) + ylab("Number of Steps") + geom_line() + facet_grid(weekday~.)
```
As can be seen from the plots above the user appears to start walking around later at weekends (maybe they sleep later). Once they are awake they tend to take more steps and to be walking around (awake?) later in the day.
activitydf <- read.csv("activity.csv") # read the datafile from csv
getwd()
setwd("C:/Users/PHUNKMJ/Desktop/Coursera/Modules5")
getwd()
